"""
_Head.Soeurise - V3.4 WITH LOGGING
D√©bogage des endpoints GET /api/mc, /api/mm, /api/ml
Chaque requ√™te g√©n√®re une trace compl√®te pour diagnostiquer les probl√®mes de synchronisation.

CHANGEMENTS V3.4 WITH LOGGING:
- ‚úÖ Logging structur√© avec request_id unique par requ√™te
- ‚úÖ Traces Git (pull status, stdout, stderr)
- ‚úÖ Traces fichier (chemin, existence, taille, modification)
- ‚úÖ Analyses de contenu (lignes, derni√®res dates, timestamps)
- ‚úÖ Payload JSON enrichie avec donn√©es de d√©bogage
- ‚úÖ Traceback complet en cas d'erreur
"""

import os
import json
import base64
from datetime import datetime
import anthropic
import psycopg2
from psycopg2.extras import RealDictCursor
import imaplib
import email
from email.header import decode_header
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import schedule
import time
import subprocess
import threading
import re
from flask import Flask, request, jsonify

# =====================================================
# CONFIGURATION
# =====================================================

DB_URL = os.environ['DATABASE_URL']
ANTHROPIC_API_KEY = os.environ['ANTHROPIC_API_KEY']
SOEURISE_EMAIL = os.environ['SOEURISE_EMAIL']
SOEURISE_PASSWORD = os.environ['SOEURISE_PASSWORD']
NOTIF_EMAIL = os.environ['NOTIF_EMAIL']
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
GITHUB_REPO_URL = os.environ.get('GITHUB_REPO_URL', 'https://github.com/SoeuriseSCI/head-soeurise-module1.git')
GIT_USER_NAME = os.environ.get('GIT_USER_NAME', '_Head.Soeurise')
GIT_USER_EMAIL = os.environ.get('GIT_USER_EMAIL', 'u6334452013@gmail.com')
API_SECRET_TOKEN = os.environ.get('API_SECRET_TOKEN', 'changeme')

REPO_DIR = '/home/claude/repo'
ATTACHMENTS_DIR = '/home/claude/attachments'

GITHUB_REPO = "SoeuriseSCI/head-soeurise-module1"
CLAUDE_MODEL = "claude-haiku-4-5-20251001"

app = Flask(__name__)

# =====================================================
# üîß ENDPOINTS AVEC LOGGING COMPLET
# =====================================================

def format_log_header(request_id, endpoint):
    """Cr√©e un en-t√™te de log format√©"""
    return f"\n{'='*75}\n[{request_id}] {endpoint}\n{'='*75}"

def format_log_step(request_id, step_num, step_name, message=""):
    """Formate une √©tape de log"""
    return f"[{request_id}] {step_num}Ô∏è‚É£  {step_name}" + (f" ‚Üí {message}" if message else "")

@app.route('/api/mc', methods=['GET'])
def get_memoire_courte():
    """Retourne m√©moire courte - Endpoint GET avec logging complet"""
    token = request.args.get('token')
    request_id = f"mc-{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    print(format_log_header(request_id, "GET /api/mc"))
    print(f"[{request_id}] Token re√ßu: {token[:25] if token else 'NONE'}...")
    
    # Validation
    if token != API_SECRET_TOKEN:
        print(f"[{request_id}] ‚ùå TOKEN INVALIDE")
        print(f"{'='*75}\n")
        return jsonify({'error': 'Token invalide', 'status': 'UNAUTHORIZED'}), 401
    
    print(f"[{request_id}] ‚úì Token valid√©")
    
    try:
        # STEP 1: Git pull
        print(format_log_step(request_id, "1", "Git Pull", REPO_DIR))
        result = subprocess.run(
            ['git', 'pull'],
            cwd=REPO_DIR,
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode != 0:
            print(f"[{request_id}] ‚ö†Ô∏è  Git stderr: {result.stderr[:200]}")
        else:
            git_status = result.stdout.split('\n')[0]
            print(f"[{request_id}]    Status: {git_status}")
        
        # STEP 2: V√©rifier fichier
        filepath = os.path.join(REPO_DIR, 'memoire_courte.md')
        print(format_log_step(request_id, "2", "V√©rification fichier", filepath))
        
        if not os.path.exists(filepath):
            raise FileNotFoundError(f"Fichier non trouv√©: {filepath}")
        
        file_size = os.path.getsize(filepath)
        file_mtime = datetime.fromtimestamp(os.path.getmtime(filepath))
        print(f"[{request_id}]    ‚úì Existe: {file_size} bytes, modifi√©: {file_mtime.isoformat()}")
        
        # STEP 3: Lire contenu
        print(format_log_step(request_id, "3", "Lecture fichier"))
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        content_lines = content.split('\n')
        print(f"[{request_id}]    ‚úì Contenu: {len(content)} chars, {len(content_lines)} lignes")
        
        # STEP 4: Analyser contenu
        print(format_log_step(request_id, "4", "Analyse contenu"))
        
        # Lignes non vides
        non_empty_lines = [l for l in content_lines if l.strip()]
        first_line = non_empty_lines[0][:100] if non_empty_lines else "[VIDE]"
        last_line = non_empty_lines[-1][:100] if non_empty_lines else "[VIDE]"
        
        print(f"[{request_id}]    Premi√®re ligne: {first_line}")
        print(f"[{request_id}]    Derni√®re ligne: {last_line}")
        
        # Dates (format JJ/MM/YYYY)
        date_pattern = r'\d{1,2}/\d{1,2}/\d{4}'
        dates_found = re.findall(date_pattern, content)
        if dates_found:
            unique_dates = sorted(set(dates_found))
            print(f"[{request_id}]    Dates trouv√©es: {len(unique_dates)} uniques")
            print(f"[{request_id}]    Plage: {unique_dates[0]} ‚Üí {unique_dates[-1]}")
        
        # STEP 5: Pr√©parer r√©ponse
        print(format_log_step(request_id, "5", "Pr√©paration r√©ponse"))
        
        response_payload = {
            'status': 'OK',
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'type': 'courte',
            'meta': {
                'size_bytes': len(content),
                'line_count': len(content_lines),
                'non_empty_lines': len(non_empty_lines),
                'file_last_modified': file_mtime.isoformat(),
                'dates_found': len(dates_found),
                'date_range': {
                    'start': min(dates_found) if dates_found else None,
                    'end': max(dates_found) if dates_found else None
                }
            },
            'debug': {
                'request_id': request_id,
                'git_pull_status': result.returncode,
                'file_exists': True,
                'encoding': 'utf-8'
            }
        }
        
        print(f"[{request_id}] ‚úÖ SUCC√àS - {len(content)} bytes √† envoyer")
        print(f"{'='*75}\n")
        
        return jsonify(response_payload), 200
        
    except Exception as e:
        print(f"[{request_id}] ‚ùå ERREUR: {type(e).__name__}")
        print(f"[{request_id}]    {str(e)}")
        
        import traceback
        tb = traceback.format_exc()
        for line in tb.split('\n'):
            if line.strip():
                print(f"[{request_id}]    {line}")
        
        print(f"{'='*75}\n")
        
        return jsonify({
            'status': 'ERROR',
            'error': str(e),
            'error_type': type(e).__name__,
            'request_id': request_id
        }), 500


@app.route('/api/mm', methods=['GET'])
def get_memoire_moyenne():
    """Retourne m√©moire moyenne - Endpoint GET avec logging complet"""
    token = request.args.get('token')
    request_id = f"mm-{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    print(format_log_header(request_id, "GET /api/mm"))
    print(f"[{request_id}] Token: {token[:25] if token else 'NONE'}...")
    
    if token != API_SECRET_TOKEN:
        print(f"[{request_id}] ‚ùå TOKEN INVALIDE\n")
        return jsonify({'error': 'Token invalide', 'status': 'UNAUTHORIZED'}), 401
    
    try:
        print(format_log_step(request_id, "1", "Git pull"))
        subprocess.run(['git', 'pull'], cwd=REPO_DIR, capture_output=True, check=True)
        
        filepath = os.path.join(REPO_DIR, 'memoire_moyenne.md')
        print(format_log_step(request_id, "2", "Lecture fichier"))
        
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        file_mtime = datetime.fromtimestamp(os.path.getmtime(filepath))
        dates = re.findall(r'\d{1,2}/\d{1,2}/\d{4}', content)
        
        print(f"[{request_id}]    ‚úì {len(content)} chars")
        print(f"[{request_id}] ‚úÖ SUCC√àS\n")
        
        return jsonify({
            'status': 'OK',
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'type': 'moyenne',
            'meta': {
                'size_bytes': len(content),
                'file_last_modified': file_mtime.isoformat(),
                'dates_found': len(dates),
                'date_range': {'start': min(dates), 'end': max(dates)} if dates else None
            }
        }), 200
        
    except Exception as e:
        print(f"[{request_id}] ‚ùå {type(e).__name__}: {e}\n")
        return jsonify({'status': 'ERROR', 'error': str(e), 'request_id': request_id}), 500


@app.route('/api/ml', methods=['GET'])
def get_memoire_longue():
    """Retourne m√©moire longue - Endpoint GET avec logging complet"""
    token = request.args.get('token')
    request_id = f"ml-{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    print(format_log_header(request_id, "GET /api/ml"))
    print(f"[{request_id}] Token: {token[:25] if token else 'NONE'}...")
    
    if token != API_SECRET_TOKEN:
        print(f"[{request_id}] ‚ùå TOKEN INVALIDE\n")
        return jsonify({'error': 'Token invalide', 'status': 'UNAUTHORIZED'}), 401
    
    try:
        print(format_log_step(request_id, "1", "Git pull"))
        subprocess.run(['git', 'pull'], cwd=REPO_DIR, capture_output=True, check=True)
        
        filepath = os.path.join(REPO_DIR, 'memoire_longue.md')
        print(format_log_step(request_id, "2", "Lecture fichier"))
        
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        file_mtime = datetime.fromtimestamp(os.path.getmtime(filepath))
        dates = re.findall(r'\d{1,2}/\d{1,2}/\d{4}', content)
        
        print(f"[{request_id}]    ‚úì {len(content)} chars")
        print(f"[{request_id}] ‚úÖ SUCC√àS\n")
        
        return jsonify({
            'status': 'OK',
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'type': 'longue',
            'meta': {
                'size_bytes': len(content),
                'file_last_modified': file_mtime.isoformat(),
                'dates_found': len(dates),
                'date_range': {'start': min(dates), 'end': max(dates)} if dates else None
            }
        }), 200
        
    except Exception as e:
        print(f"[{request_id}] ‚ùå {type(e).__name__}: {e}\n")
        return jsonify({'status': 'ERROR', 'error': str(e), 'request_id': request_id}), 500


# =====================================================
# ENDPOINT DE DIAGNOSTIC
# =====================================================

@app.route('/api/health', methods=['GET'])
def health_check():
    """V√©rification rapide de la sant√© du syst√®me"""
    request_id = f"health-{datetime.now().strftime('%H%M%S')}"
    
    try:
        # V√©rifier repo
        repo_ok = os.path.exists(os.path.join(REPO_DIR, '.git'))
        
        # V√©rifier fichiers
        mc_ok = os.path.exists(os.path.join(REPO_DIR, 'memoire_courte.md'))
        mm_ok = os.path.exists(os.path.join(REPO_DIR, 'memoire_moyenne.md'))
        ml_ok = os.path.exists(os.path.join(REPO_DIR, 'memoire_longue.md'))
        
        status = 'HEALTHY' if all([repo_ok, mc_ok, mm_ok, ml_ok]) else 'DEGRADED'
        
        print(f"[{request_id}] Health Check: {status}")
        print(f"[{request_id}]    Repo: {'‚úì' if repo_ok else '‚ùå'}, MC: {'‚úì' if mc_ok else '‚ùå'}, MM: {'‚úì' if mm_ok else '‚ùå'}, ML: {'‚úì' if ml_ok else '‚ùå'}")
        
        return jsonify({
            'status': status,
            'repo': repo_ok,
            'memoire_courte': mc_ok,
            'memoire_moyenne': mm_ok,
            'memoire_longue': ml_ok,
            'timestamp': datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        return jsonify({
            'status': 'ERROR',
            'error': str(e)
        }), 500


# =====================================================
# MAIN
# =====================================================

if __name__ == "__main__":
    print("="*75)
    print("_Head.Soeurise V3.4 WITH LOGGING")
    print("Endpoints GET /api/mc, /api/mm, /api/ml avec traces compl√®tes")
    print("="*75)
    
    port = int(os.environ.get("PORT", 10000))
    print(f"\nüöÄ Serveur Flask d√©marr√© sur port {port}")
    print(f"üìä Logging complet activ√© pour d√©bogage")
    print(f"üîê Token validation: OUI")
    print(f"\nEndpoints disponibles:")
    print(f"  GET /api/mc?token=<token> ‚Üí M√©moire Courte")
    print(f"  GET /api/mm?token=<token> ‚Üí M√©moire Moyenne")
    print(f"  GET /api/ml?token=<token> ‚Üí M√©moire Longue")
    print(f"  GET /api/health ‚Üí Diagnostic sant√© syst√®me")
    print("="*75 + "\n")
    
    app.run(host='0.0.0.0', port=port)
