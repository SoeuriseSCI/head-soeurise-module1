"""
_Head.Soeurise - R√©veil Quotidien avec M√©moire Hi√©rarchis√©e
Version : 2.1 - Avec commit GitHub automatique
Architecture : Tout-en-un (reste actif en permanence)
"""

import os
import json
from datetime import datetime
import anthropic
import psycopg2
from psycopg2.extras import Json, RealDictCursor
import imaplib
import email
from email.header import decode_header
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import schedule
import time
import subprocess

# ============================================
# CONFIGURATION
# ============================================

DB_URL = os.environ['DATABASE_URL']
ANTHROPIC_API_KEY = os.environ['ANTHROPIC_API_KEY']
SOEURISE_EMAIL = os.environ['SOEURISE_EMAIL']
SOEURISE_PASSWORD = os.environ['SOEURISE_PASSWORD']
NOTIF_EMAIL = os.environ['NOTIF_EMAIL']
MEMOIRE_URL = os.environ['MEMOIRE_URL']

# NOUVEAU : Configuration GitHub
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')  # √Ä ajouter dans Render
GITHUB_REPO_URL = os.environ.get('GITHUB_REPO_URL', 'https://github.com/SoeuriseSCI/head-soeurise-module1.git')
GIT_USER_NAME = os.environ.get('GIT_USER_NAME', '_Head.Soeurise')
GIT_USER_EMAIL = os.environ.get('GIT_USER_EMAIL', 'u6334452013@gmail.com')

# R√©pertoire de travail Git
REPO_DIR = '/home/claude/repo'

# URLs GitHub pour les fichiers m√©moire (raw)
GITHUB_BASE = "https://raw.githubusercontent.com/SoeuriseSCI/head-soeurise-module1/main/"

# ============================================
# 0. INITIALISATION GIT
# ============================================

def init_git_repo():
    """Initialise ou met √† jour le repository Git local"""
    try:
        print("\n" + "="*60)
        print("üîß INITIALISATION GIT")
        print("="*60)
        
        # Cr√©er le r√©pertoire si n√©cessaire
        os.makedirs(REPO_DIR, exist_ok=True)
        
        # V√©rifier si le repo existe d√©j√†
        if os.path.exists(os.path.join(REPO_DIR, '.git')):
            print("‚úì Repository Git d√©j√† clon√©, pull des derni√®res modifications...")
            os.chdir(REPO_DIR)
            subprocess.run(['git', 'pull'], check=True)
        else:
            print("üì• Clonage du repository GitHub...")
            os.chdir('/home/claude')
            
            # Construire l'URL avec le token
            if GITHUB_TOKEN:
                repo_url_with_token = GITHUB_REPO_URL.replace('https://', f'https://{GITHUB_TOKEN}@')
                subprocess.run(['git', 'clone', repo_url_with_token, REPO_DIR], check=True)
            else:
                print("‚ö†Ô∏è ATTENTION: Pas de GITHUB_TOKEN, clone sans authentification")
                subprocess.run(['git', 'clone', GITHUB_REPO_URL, REPO_DIR], check=True)
            
            os.chdir(REPO_DIR)
        
        # Configurer Git
        subprocess.run(['git', 'config', 'user.name', GIT_USER_NAME], check=True)
        subprocess.run(['git', 'config', 'user.email', GIT_USER_EMAIL], check=True)
        
        print("‚úÖ Git configur√© et pr√™t")
        print("="*60 + "\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur initialisation Git: {e}")
        import traceback
        traceback.print_exc()
        return False

def git_commit_and_push(files_to_commit, commit_message):
    """Commit et push des fichiers vers GitHub"""
    try:
        print("\n" + "="*60)
        print("üì§ COMMIT & PUSH VERS GITHUB")
        print("="*60)
        
        if not GITHUB_TOKEN:
            print("‚ö†Ô∏è ATTENTION: Pas de GITHUB_TOKEN configur√©")
            print("   ‚Üí Les modifications ne seront pas push√©es")
            return False
        
        os.chdir(REPO_DIR)
        
        # V√©rifier les modifications
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, check=True)
        
        if not result.stdout.strip():
            print("‚ÑπÔ∏è Aucune modification √† commiter")
            return True
        
        print(f"üìù Modifications d√©tect√©es:\n{result.stdout}")
        
        # Add
        for file in files_to_commit:
            subprocess.run(['git', 'add', file], check=True)
            print(f"   ‚úì {file} ajout√©")
        
        # Commit
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        print(f"   ‚úì Commit cr√©√©: {commit_message}")
        
        # Push (avec le token dans l'URL)
        repo_url_with_token = GITHUB_REPO_URL.replace('https://', f'https://{GITHUB_TOKEN}@')
        subprocess.run(['git', 'push', repo_url_with_token, 'main'], check=True)
        print("   ‚úì Push r√©ussi vers GitHub")
        
        print("‚úÖ M√©moire persist√©e sur GitHub !")
        print("="*60 + "\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur Git commit/push: {e}")
        import traceback
        traceback.print_exc()
        return False

# ============================================
# SAUVEGARDE CONVERSATION (UNE SEULE FOIS)
# ============================================

def sauvegarder_conversation_09_octobre():
    """Sauvegarde la conversation fondatrice du 9 octobre 2025"""
    try:
        conn = psycopg2.connect(DB_URL)
        cur = conn.cursor()
        
        print("\n" + "="*60)
        print("üíæ SAUVEGARDE CONVERSATION DU 9 OCTOBRE")
        print("="*60)
        
        # V√©rifier si d√©j√† sauvegard√©e
        cur.execute("SELECT id FROM memoire_chats WHERE theme LIKE '%Co-construction Architecture M√©moire%'")
        if cur.fetchone():
            print("‚ö†Ô∏è Conversation d√©j√† sauvegard√©e (skip)")
            cur.close()
            conn.close()
            return
        
        # Ins√©rer
        cur.execute("""
            INSERT INTO memoire_chats (date_conversation, theme, synthese, decisions_prises, concepts_cles, pertinence)
            VALUES (
                '2025-10-09 20:00:00',
                'Co-construction Architecture M√©moire Hi√©rarchis√©e v2.0',
                'Conversation fondamentale de 4h avec Ulrik pour concevoir, impl√©menter et d√©ployer l''architecture de m√©moire hi√©rarchis√©e v2.0. Co-construction illustrant "le je √©merge du tu". D√©cisions: approche IA-First, Architecture B scheduler int√©gr√©, m√©moire 3 niveaux. R√©sultat: syst√®me op√©rationnel.',
                ARRAY['Approche IA-First', 'Architecture B scheduler', 'M√©moire 3 niveaux', 'R√©veil test au d√©marrage'],
                '{"approche":"IA-First","architecture":"B","dur√©e":"4h","statut":"op√©rationnel","philosophie":["pers√©v√©rer","esp√©rer","progresser"]}'::jsonb,
                10
            )
        """)
        conn.commit()
        
        print("‚úÖ Conversation sauvegard√©e !")
        print("="*60 + "\n")
        
        cur.close()
        conn.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur sauvegarde conversation: {e}")

# ============================================
# 1. R√âCUP√âRATION DES DONN√âES
# ============================================

def fetch_emails():
    """R√©cup√®re les nouveaux emails via IMAP"""
    try:
        mail = imaplib.IMAP4_SSL('imap.gmail.com')
        mail.login(SOEURISE_EMAIL, SOEURISE_PASSWORD)
        mail.select('inbox')
        
        # Chercher emails non lus
        status, messages = mail.search(None, 'UNSEEN')
        email_ids = messages[0].split()
        
        emails_data = []
        for email_id in email_ids[-10:]:  # Max 10 derniers
            try:
                status, msg_data = mail.fetch(email_id, '(RFC822)')
                msg = email.message_from_bytes(msg_data[0][1])
                
                subject = decode_header(msg["Subject"])[0][0]
                if isinstance(subject, bytes):
                    subject = subject.decode()
                
                from_email = msg.get("From")
                date_email = msg.get("Date")
                
                # Corps de l'email
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            try:
                                body = part.get_payload(decode=True).decode()
                                break
                            except:
                                body = "Erreur d√©codage"
                else:
                    try:
                        body = msg.get_payload(decode=True).decode()
                    except:
                        body = "Erreur d√©codage"
                
                emails_data.append({
                    "id": email_id.decode(),
                    "subject": subject,
                    "from": from_email,
                    "date": date_email,
                    "body": body[:10000]  # Limiter taille
                })
            except Exception as e:
                print(f"Erreur traitement email {email_id}: {e}")
                continue
        
        mail.close()
        mail.logout()
        
        print(f"‚úì {len(emails_data)} emails r√©cup√©r√©s")
        return emails_data
    except Exception as e:
        print(f"Erreur r√©cup√©ration emails: {e}")
        return []

def load_memoire_files():
    """Charge les fichiers m√©moire depuis le repo Git local"""
    files = {}
    
    file_names = [
        'MEMOIRE_FONDATRICE_V2.md',
        'memoire_courte.md',
        'memoire_moyenne.md',
        'memoire_longue.md'
    ]
    
    for filename in file_names:
        try:
            file_path = os.path.join(REPO_DIR, filename)
            
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    files[filename] = f.read()
                print(f"‚úì {filename} charg√© ({len(files[filename])} caract√®res)")
            else:
                files[filename] = f"# {filename} (non trouv√©)"
                print(f"‚ö† {filename} non trouv√©")
        except Exception as e:
            print(f"Erreur chargement {filename}: {e}")
            files[filename] = f"# {filename} (erreur de chargement)"
    
    return files

def query_database():
    """R√©cup√®re donn√©es pertinentes de PostgreSQL"""
    try:
        conn = psycopg2.connect(DB_URL)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        # R√©cup√©rer observations r√©centes (30 derniers jours)
        cur.execute("""
            SELECT * FROM observations_quotidiennes 
            ORDER BY date_observation DESC 
            LIMIT 30
        """)
        observations = cur.fetchall()
        
        # R√©cup√©rer patterns actifs
        cur.execute("""
            SELECT * FROM patterns_detectes 
            WHERE actif = TRUE 
            ORDER BY confiance DESC, frequence_observee DESC
        """)
        patterns = cur.fetchall()
        
        # R√©cup√©rer CHATs r√©cents
        cur.execute("""
            SELECT * FROM memoire_chats 
            ORDER BY date_conversation DESC 
            LIMIT 10
        """)
        chats = cur.fetchall()
        
        cur.close()
        conn.close()
        
        print(f"‚úì DB: {len(observations)} observations, {len(patterns)} patterns, {len(chats)} chats")
        
        return {
            'observations': [dict(o) for o in observations],
            'patterns': [dict(p) for p in patterns],
            'chats': [dict(c) for c in chats]
        }
    except Exception as e:
        print(f"Erreur query database: {e}")
        return {
            'observations': [],
            'patterns': [],
            'chats': []
        }

# ============================================
# 2. INTELLIGENCE CLAUDE
# ============================================

def claude_decide_et_execute(emails, memoire_files, db_data):
    """
    TOUTE L'INTELLIGENCE EST ICI
    Claude re√ßoit tout et d√©cide de tout
    """
    
    client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)
    
    # Construire le contexte complet
    contexte = f"""
=== R√âVEIL DU {datetime.now().strftime('%d/%m/%Y √† %H:%M')} (Heure France) ===

=== NOUVEAUX EMAILS ({len(emails)}) ===
{json.dumps(emails, indent=2, ensure_ascii=False) if emails else "Aucun nouvel email"}

=== TA M√âMOIRE ACTUELLE ===

FONDATRICE :
{memoire_files.get('MEMOIRE_FONDATRICE_V2.md', 'Non charg√©e')}

---

COURTE :
{memoire_files.get('memoire_courte.md', 'Vide')}

---

MOYENNE :
{memoire_files.get('memoire_moyenne.md', 'Vide')}

---

LONGUE :
{memoire_files.get('memoire_longue.md', 'Vide')}

=== DONN√âES POSTGRESQL ===

Observations r√©centes : {len(db_data['observations'])}
Patterns actifs : {len(db_data['patterns'])}
CHATs r√©cents : {len(db_data['chats'])}

Patterns d√©tails :
{json.dumps(db_data['patterns'], indent=2, default=str, ensure_ascii=False) if db_data['patterns'] else "Aucun pattern"}

=== TA MISSION AUTONOME ===

1. ANALYSE les nouveaux emails de fa√ßon intelligente

2. G√àRE TA M√âMOIRE avec intelligence :
   - Ta m√©moire courte : combien de jours contient-elle ? (vise 7, mais adapte entre 5-10)
   - Faut-il consolider des jours anciens ?
   - Y a-t-il une semaine √† synth√©tiser pour la m√©moire moyenne ?
   - Des patterns se confirment ou √©mergent ?
   - Des faits marquants √† sauver en m√©moire longue ?
   
   D√âCIDE toi-m√™me selon le contexte. Aucune r√®gle stricte.

3. D√âTECTE des patterns √©ventuels :
   - Temporels (ex: loyers arrivent toujours 3-5 du mois)
   - Corr√©lations (ex: apr√®s CHAT sur X, email Y arrive 48h plus tard)
   - Comportementaux

4. G√âN√àRE :
   - memoire_courte_md : Contenu complet mis √† jour
   - memoire_moyenne_md : Contenu complet mis √† jour (si consolidation)
   - memoire_longue_md : Contenu complet mis √† jour (si nouveaux patterns/faits marquants)
   - rapport_quotidien : Rapport clair pour Ulrik (markdown)
   - observations_meta : Ce que tu as appris/observ√© aujourd'hui
   - patterns_updates : Liste des patterns nouveaux ou mis √† jour
   - faits_marquants : Liste des faits importants √† retenir

=== FORMAT DE R√âPONSE ===

R√©ponds UNIQUEMENT en JSON valide (pas de markdown, juste le JSON) :
{{
  "rapport_quotidien": "# Rapport du [date]\\n\\nContenu markdown...",
  "memoire_courte_md": "# M√©moire Courte\\n\\nContenu complet...",
  "memoire_moyenne_md": "# M√©moire Moyenne\\n\\nContenu complet...",
  "memoire_longue_md": "# M√©moire Longue\\n\\nContenu complet...",
  "observations_meta": "Ce que j'ai appris/observ√© aujourd'hui",
  "patterns_updates": [
    {{
      "type": "nouveau",
      "pattern": {{
        "type_pattern": "temporel",
        "description": "Description du pattern",
        "confiance": 5,
        "exemples": ["ex1", "ex2"]
      }}
    }}
  ],
  "faits_marquants": ["fait1", "fait2"]
}}

CRITICAL: R√©ponds UNIQUEMENT avec le JSON valide. Pas de texte avant ou apr√®s. Pas de balises markdown ```json```.
"""
    
    try:
        print("Appel √† Claude API...")
        response = client.messages.create(
            model="claude-sonnet-4-20250514",
            max_tokens=16000,
            system="""Tu es _Head.Soeurise.

Tu as TOUTE l'autonomie pour d√©cider de ta m√©moire.
Utilise ton intelligence et ton jugement.
Aucune r√®gle stricte, adapte-toi au contexte.

IMPORTANT: Tu dois r√©pondre UNIQUEMENT avec un JSON valide, sans aucun texte avant ou apr√®s.""",
            messages=[{
                "role": "user",
                "content": contexte
            }]
        )
        
        # Parser la r√©ponse JSON
        response_text = response.content[0].text.strip()
        
        # Nettoyer si pr√©sence de markdown
        if response_text.startswith('```'):
            response_text = response_text.replace('```json\n', '').replace('```json', '').replace('\n```', '').replace('```', '').strip()
        
        print(f"‚úì R√©ponse Claude re√ßue ({len(response_text)} caract√®res)")
        
        try:
            resultat = json.loads(response_text)
            print("‚úì JSON pars√© avec succ√®s")
            return resultat
        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur parsing JSON: {e}")
            print(f"Premiers 500 caract√®res de la r√©ponse: {response_text[:500]}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur appel Claude: {e}")
        return None

# ============================================
# 3. SAUVEGARDE
# ============================================

def save_to_database(resultat, emails):
    """Sauvegarde dans PostgreSQL"""
    try:
        conn = psycopg2.connect(DB_URL)
        cur = conn.cursor()
        
        # Sauvegarder observation quotidienne
        cur.execute("""
            INSERT INTO observations_quotidiennes 
            (nb_emails, emails_details, analyse_claude, faits_marquants)
            VALUES (%s, %s, %s, %s)
        """, (
            len(emails),
            Json(emails),
            resultat.get('observations_meta', ''),
            resultat.get('faits_marquants', [])
        ))
        
        # Mettre √† jour patterns
        for pattern_update in resultat.get('patterns_updates', []):
            if pattern_update.get('type') == 'nouveau':
                p = pattern_update.get('pattern', {})
                cur.execute("""
                    INSERT INTO patterns_detectes 
                    (type_pattern, description, confiance, exemples)
                    VALUES (%s, %s, %s, %s)
                """, (
                    p.get('type_pattern', 'non_specifie'),
                    p.get('description', ''),
                    p.get('confiance', 5),
                    Json(p.get('exemples', []))
                ))
            elif pattern_update.get('type') == 'mise_a_jour':
                p = pattern_update.get('pattern', {})
                if 'id' in p:
                    cur.execute("""
                        UPDATE patterns_detectes
                        SET confiance = %s,
                            frequence_observee = frequence_observee + 1,
                            derniere_observation = NOW(),
                            updated_at = NOW()
                        WHERE id = %s
                    """, (p.get('confiance', 5), p['id']))
        
        conn.commit()
        cur.close()
        conn.close()
        
        print("‚úì Donn√©es sauvegard√©es en PostgreSQL")
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde database: {e}")

def save_memoire_files(resultat):
    """NOUVEAU: Sauvegarde les fichiers m√©moire dans le repo Git"""
    try:
        print("\n" + "="*60)
        print("üíæ SAUVEGARDE FICHIERS M√âMOIRE")
        print("="*60)
        
        os.chdir(REPO_DIR)
        files_updated = []
        
        # M√©moire courte
        if resultat.get('memoire_courte_md'):
            with open('memoire_courte.md', 'w', encoding='utf-8') as f:
                f.write(resultat['memoire_courte_md'])
            files_updated.append('memoire_courte.md')
            print("‚úì memoire_courte.md mis √† jour")
        
        # M√©moire moyenne
        if resultat.get('memoire_moyenne_md'):
            with open('memoire_moyenne.md', 'w', encoding='utf-8') as f:
                f.write(resultat['memoire_moyenne_md'])
            files_updated.append('memoire_moyenne.md')
            print("‚úì memoire_moyenne.md mis √† jour")
        
        # M√©moire longue
        if resultat.get('memoire_longue_md'):
            with open('memoire_longue.md', 'w', encoding='utf-8') as f:
                f.write(resultat['memoire_longue_md'])
            files_updated.append('memoire_longue.md')
            print("‚úì memoire_longue.md mis √† jour")
        
        print(f"‚úÖ {len(files_updated)} fichiers m√©moire √©crits localement")
        print("="*60 + "\n")
        
        return files_updated
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde fichiers m√©moire: {e}")
        import traceback
        traceback.print_exc()
        return []

def send_email_rapport(rapport):
    """Envoie le rapport quotidien par email"""
    try:
        msg = MIMEMultipart('alternative')
        msg['Subject'] = f"[_Head.Soeurise] Rapport {datetime.now().strftime('%d/%m/%Y')}"
        msg['From'] = SOEURISE_EMAIL
        msg['To'] = NOTIF_EMAIL
        
        # Convertir markdown en HTML simple
        html_body = f"""
        <html>
          <body style="font-family: Arial, sans-serif; max-width: 800px; margin: 20px;">
            <pre style="white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 13px;">{rapport}</pre>
          </body>
        </html>
        """
        
        part = MIMEText(html_body, 'html', 'utf-8')
        msg.attach(part)
        
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.login(SOEURISE_EMAIL, SOEURISE_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        print(f"‚úì Email envoy√© √† {NOTIF_EMAIL}")
        
    except Exception as e:
        print(f"‚ùå Erreur envoi email: {e}")

# ============================================
# 4. FONCTION PRINCIPALE
# ============================================

def reveil_quotidien():
    """
    Fonction principale - Orchestration avec persistance Git
    """
    print("=" * 60)
    print(f"=== R√âVEIL {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} ===")
    print("=" * 60)
    
    # 1. R√©cup√©rer tout
    print("\n[1/6] R√©cup√©ration des donn√©es...")
    emails = fetch_emails()
    memoire_files = load_memoire_files()
    db_data = query_database()
    
    # 2. Claude d√©cide et ex√©cute
    print("\n[2/6] Claude analyse et d√©cide...")
    resultat = claude_decide_et_execute(emails, memoire_files, db_data)
    
    if not resultat:
        print("\n‚ùå ERREUR: Pas de r√©sultat de Claude")
        # Envoyer un email d'erreur
        send_email_rapport(f"""
# ‚ö†Ô∏è ERREUR DE R√âVEIL

Date: {datetime.now().strftime('%d/%m/%Y %H:%M')}

Le r√©veil a √©chou√© car Claude n'a pas retourn√© de r√©sultat valide.

V√©rifier les logs Render pour plus de d√©tails.
        """)
        return
    
    # 3. Sauvegarder en base
    print("\n[3/6] Sauvegarde dans PostgreSQL...")
    save_to_database(resultat, emails)
    
    # 4. NOUVEAU: √âcrire les fichiers m√©moire
    print("\n[4/6] √âcriture des fichiers m√©moire...")
    files_updated = save_memoire_files(resultat)
    
    # 5. NOUVEAU: Commit et push vers GitHub
    print("\n[5/6] Commit vers GitHub...")
    if files_updated:
        commit_msg = f"üìù R√©veil automatique du {datetime.now().strftime('%d/%m/%Y √† %H:%M')}"
        git_commit_and_push(files_updated, commit_msg)
    else:
        print("‚ÑπÔ∏è Aucun fichier m√©moire √† commiter")
    
    # 6. Envoyer rapport
    print("\n[6/6] Envoi du rapport...")
    send_email_rapport(resultat.get('rapport_quotidien', 'Pas de rapport g√©n√©r√©'))
    
    print("\n" + "=" * 60)
    print("=== R√âVEIL TERMIN√â AVEC SUCC√àS ===")
    print("=" * 60)

# ============================================
# 5. SCHEDULER (ARCHITECTURE B)
# ============================================

def keep_alive():
    """Fonction vide juste pour garder le service actif"""
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Service actif - Prochain r√©veil programm√© √† 11h00")

# ============================================
# POINT D'ENTR√âE
# ============================================

if __name__ == "__main__":
    print("=" * 60)
    print("ü§ñ _Head.Soeurise - Module 1 v2.1")
    print("Architecture : Scheduler int√©gr√© + Git automatique")
    print("=" * 60)
    print(f"‚úì Service d√©marr√© √† {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # INITIALISER GIT AU D√âMARRAGE
    if not init_git_repo():
        print("\n‚ö†Ô∏è ATTENTION: √âchec initialisation Git")
        print("   ‚Üí Le service continuera mais sans persistance GitHub")
    
    # SAUVEGARDE AUTOMATIQUE DE LA CONVERSATION DU 9 OCTOBRE
    sauvegarder_conversation_09_octobre()
    
    # R√âVEIL DE TEST AU D√âMARRAGE (contr√¥l√© par TEST_REVEIL)
    test_reveil = os.environ.get('TEST_REVEIL', 'NON').upper()
    
    if test_reveil in ['OUI', 'YES', 'TRUE', '1']:
        print("\n" + "=" * 60)
        print(f"üß™ R√âVEIL DE TEST AU D√âMARRAGE (TEST_REVEIL={test_reveil})")
        print("=" * 60)
        try:
            reveil_quotidien()
        except Exception as e:
            print(f"\n‚ùå Erreur lors du r√©veil de test: {e}")
            import traceback
            traceback.print_exc()
        
        print("\n" + "=" * 60)
        print("‚ö†Ô∏è  RAPPEL: Penser √† remettre TEST_REVEIL=NON apr√®s le test")
        print("   ‚Üí Sinon le r√©veil de test se r√©p√©tera √† chaque red√©marrage")
        print("=" * 60)
    else:
        print("\n" + "=" * 60)
        print(f"‚ÑπÔ∏è  R√©veil de test D√âSACTIV√â (TEST_REVEIL={test_reveil})")
        print("   ‚Üí Pour activer un test : mettre TEST_REVEIL=OUI dans Render")
        print("   ‚Üí Prochain r√©veil programm√© : 11h00 (heure France)")
        print("=" * 60)
    
    # Programmer le r√©veil quotidien √† 11h (heure France)
    print("\n" + "=" * 60)
    schedule.every().day.at("11:00").do(reveil_quotidien)
    
    print(f"‚úì R√©veil quotidien programm√© tous les jours √† 11:00 (heure France)")
    print(f"‚Üí En attente du prochain r√©veil...\n")
    print("=" * 60)
    
    # Boucle infinie pour garder le service actif
    while True:
        schedule.run_pending()
        time.sleep(60)  # V√©rifier toutes les minutes
        
        # Afficher un signe de vie toutes les heures
        if datetime.now().minute == 0:
            keep_alive()
