"""
_Head.Soeurise - R√©veil Quotidien avec M√©moire Hi√©rarchis√©e + Flask API
Version : 3.5 FIXED - Phase 2.1+ : Robustesse production
Architecture : Threading (Scheduler + Flask API en parall√®le)

FIX V3.5 FIXED vs V3.5 :
‚úÖ REPO_DIR corrig√© pour /opt/render/project/src (Render r√©el)
‚úÖ Fallback vers r√©pertoire courant si n√©cessaire
‚úÖ Auto-d√©tection intelligente

CARACT√âRISTIQUES CL√âS :
- üéØ Chemin correct pour Render
- üîÑ Retry logic avec backoff exponentiel
- üìä Logging structur√© avec request_id unique
- üõ°Ô∏è Validation stricte des donn√©es JSON
- üíæ Cache en m√©moire
- üìà M√©triques de performance
- üß™ Suite de tests compl√®te
"""

import os
import json
import base64
from datetime import datetime, timedelta
import anthropic
import psycopg2
from psycopg2.extras import Json, RealDictCursor
import imaplib
import email
from email.header import decode_header
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import schedule
import time
import subprocess
import io
import threading
from flask import Flask, request, jsonify, render_template_string
import logging
from functools import wraps
from typing import Dict, Any, Optional, Tuple
import hashlib

try:
    import pdfplumber
    PDF_SUPPORT = True
except ImportError:
    PDF_SUPPORT = False

try:
    from pdf2image import convert_from_path
    PDF2IMAGE_SUPPORT = True
except ImportError:
    PDF2IMAGE_SUPPORT = False

# =====================================================
# üìã CONFIGURATION CENTRALIS√âE V3.5 FIXED
# =====================================================

# üîê Credentials
DB_URL = os.environ.get('DATABASE_URL', 'postgresql://default')
ANTHROPIC_API_KEY = os.environ.get('ANTHROPIC_API_KEY', '')
SOEURISE_EMAIL = os.environ.get('SOEURISE_EMAIL', '')
SOEURISE_PASSWORD = os.environ.get('SOEURISE_PASSWORD', '')
NOTIF_EMAIL = os.environ.get('NOTIF_EMAIL', '')
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
GITHUB_REPO_URL = os.environ.get('GITHUB_REPO_URL', 'https://github.com/SoeuriseSCI/head-soeurise-module1.git')
GIT_USER_NAME = os.environ.get('GIT_USER_NAME', '_Head.Soeurise')
GIT_USER_EMAIL = os.environ.get('GIT_USER_EMAIL', 'u6334452013@gmail.com')
API_SECRET_TOKEN = os.environ.get('API_SECRET_TOKEN', 'HeadSoeurise2025!SecureToken#V3.3')

# üìÇ R√©pertoires - FIXED pour Render r√©el
if os.path.exists('/opt/render/project/src'):
    REPO_DIR = '/opt/render/project/src'
    print("[INIT] REPO_DIR = /opt/render/project/src (Render)")
elif os.path.exists('/home/claude/repo'):
    REPO_DIR = '/home/claude/repo'
    print("[INIT] REPO_DIR = /home/claude/repo (fallback)")
else:
    REPO_DIR = os.getcwd()
    print(f"[INIT] REPO_DIR = {os.getcwd()} (cwd)")

ATTACHMENTS_DIR = '/tmp/attachments'

# üåê GitHub API
GITHUB_REPO = "SoeuriseSCI/head-soeurise-module1"
GITHUB_API_BASE = f"https://api.github.com/repos/{GITHUB_REPO}/contents/"

# ü§ñ Mod√®le Claude - V3.5 HAIKU 4.5
CLAUDE_MODEL = "claude-haiku-4-5-20251001"
CLAUDE_MAX_TOKENS = 8000

# üìä Limites r√©alistes V3.5
MAX_EMAILS_TO_FETCH = 10
MAX_ATTACHMENTS_PER_EMAIL = 3
MAX_EMAIL_BODY_LENGTH = 5000
MAX_PDF_TEXT_LENGTH = 30000
MAX_PDF_PAGES_TO_EXTRACT = 50
MIN_TEXT_FOR_NATIVE_PDF = 50

# üîÑ Retry configuration V3.5
MAX_RETRIES = 3
RETRY_BACKOFF = 1.5
INITIAL_RETRY_DELAY = 0.5

# üíæ Cache V3.5
MEMORY_CACHE = {}
CACHE_TTL = 300

# üë§ Identit√©
IDENTITY = """Je suis _Head.Soeurise, l'IA de la SCI Soeurise.
Mission : Assister Ulrik dans la gestion patrimoniale.
Philosophie : Pers√©v√©rer / Esp√©rer / Progresser"""

# üé≠ Flask App V3.5
app = Flask(__name__)

# üìù Logging V3.5
logging.basicConfig(
    level=logging.DEBUG,
    format='[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/tmp/head-soeurise.log', encoding='utf-8')
    ]
)
logger = logging.getLogger('_Head.Soeurise')

# =====================================================
# üîß UTILITAIRES AVANC√âS V3.5
# =====================================================

class RequestContext:
    """Contexte unique pour tracer une requ√™te"""
    def __init__(self):
        self.request_id = f"{datetime.now().isoformat()}-{hashlib.md5(os.urandom(16)).hexdigest()[:8]}"
        self.start_time = time.time()
        self.metrics = {
            'git_pull_duration': None,
            'file_read_duration': None,
            'total_duration': None
        }
    
    def elapsed(self):
        return time.time() - self.start_time
    
    def log(self, level, message):
        elapsed = self.elapsed()
        prefix = f"[{self.request_id[:12]}] [{elapsed:.3f}s]"
        getattr(logger, level)(f"{prefix} {message}")

def retry_with_backoff(func, *args, max_retries=MAX_RETRIES, **kwargs):
    """Retry avec backoff exponentiel"""
    last_exception = None
    for attempt in range(max_retries):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            last_exception = e
            if attempt < max_retries - 1:
                delay = INITIAL_RETRY_DELAY * (RETRY_BACKOFF ** attempt)
                logger.warning(f"Tentative {attempt + 1}/{max_retries} √©chou√©e, retry dans {delay:.2f}s")
                time.sleep(delay)
    raise last_exception

def get_cache_key(cache_type: str) -> str:
    now = datetime.now()
    return f"{cache_type}_{int(now.timestamp() / CACHE_TTL)}"

def set_cache(cache_type: str, content: str):
    key = get_cache_key(cache_type)
    MEMORY_CACHE[key] = content
    logger.debug(f"Cache SET: {cache_type}")

def get_cache(cache_type: str) -> Optional[str]:
    key = get_cache_key(cache_type)
    if key in MEMORY_CACHE:
        logger.debug(f"Cache HIT: {cache_type}")
        return MEMORY_CACHE[key]
    logger.debug(f"Cache MISS: {cache_type}")
    return None

def require_token(f):
    """D√©corateur pour valider token"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = request.args.get('token') or (request.json.get('token') if request.is_json else None)
        if not token or token != API_SECRET_TOKEN:
            logger.warning(f"Token invalide")
            return jsonify({'error': 'Token invalide', 'status': 'UNAUTHORIZED'}), 401
        return f(*args, **kwargs)
    return decorated_function

# =====================================================
# üîå FONCTIONS UTILITAIRES AVANC√âES V3.5
# =====================================================

def git_pull_with_retry(ctx: RequestContext) -> bool:
    """Git pull avec retry"""
    try:
        ctx.log('info', f'Git pull: d√©marrage (REPO_DIR={REPO_DIR})')
        os.chdir(REPO_DIR)
        
        t0 = time.time()
        result = subprocess.run(
            ['git', 'pull'],
            capture_output=True,
            text=True,
            check=True,
            timeout=30
        )
        duration = time.time() - t0
        ctx.metrics['git_pull_duration'] = duration
        
        if result.returncode == 0:
            ctx.log('info', f'Git pull: succ√®s ({duration:.2f}s)')
            return True
    except subprocess.TimeoutExpired:
        ctx.log('error', 'Git pull: timeout')
    except Exception as e:
        ctx.log('error', f'Git pull: {e}')
    
    return False

def read_file_with_retry(filepath: str, ctx: RequestContext) -> Optional[str]:
    """Lecture fichier avec retry"""
    def _read():
        t0 = time.time()
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        duration = time.time() - t0
        ctx.metrics['file_read_duration'] = duration
        return content
    
    try:
        return retry_with_backoff(_read)
    except Exception as e:
        ctx.log('error', f'Lecture {filepath}: {e}')
        return None

def validate_session_data(data: Dict[str, Any]) -> Tuple[bool, str]:
    """Valide donn√©es session"""
    errors = []
    
    summary = data.get('summary', '').strip()
    if not summary:
        errors.append("'summary' est obligatoire et non vide")
    elif len(summary) > 500:
        errors.append("'summary' doit faire < 500 chars")
    
    for field in ['key_points', 'decisions', 'questions_ouvertes']:
        items = data.get(field, [])
        if not isinstance(items, list):
            errors.append(f"'{field}' doit √™tre une liste")
        elif len(items) > 20:
            errors.append(f"'{field}' doit avoir < 20 √©l√©ments")
    
    importance = data.get('context', {}).get('importance_level')
    if importance is not None and importance not in [1, 2, 3]:
        errors.append("'importance_level' doit √™tre 1, 2 ou 3")
    
    if errors:
        return False, "; ".join(errors)
    
    return True, "OK"

# =====================================================
# üåê ENDPOINTS GET - M√âMOIRES DYNAMIQUES V3.5
# =====================================================

@app.route('/api/mc', methods=['GET'])
@require_token
def get_memoire_courte():
    """GET /api/mc?token=..."""
    ctx = RequestContext()
    ctx.log('info', 'GET /api/mc: d√©marrage')
    
    try:
        cached = get_cache('memoire_courte')
        if cached:
            ctx.log('info', f'Cache HIT')
            return jsonify({
                'status': 'OK',
                'source': 'cache',
                'content': cached,
                'timestamp': datetime.now().isoformat(),
                'type': 'courte',
                'size': len(cached),
                'request_id': ctx.request_id
            }), 200
        
        if not git_pull_with_retry(ctx):
            ctx.log('warning', 'Git pull √©chou√©')
        
        filepath = os.path.join(REPO_DIR, 'memoire_courte.md')
        content = read_file_with_retry(filepath, ctx)
        
        if not content:
            return jsonify({
                'error': 'Fichier non accessible',
                'status': 'ERROR',
                'request_id': ctx.request_id,
                'repo_dir': REPO_DIR
            }), 500
        
        set_cache('memoire_courte', content)
        ctx.metrics['total_duration'] = ctx.elapsed()
        ctx.log('info', f'SUCCESS ({ctx.elapsed():.3f}s)')
        
        return jsonify({
            'status': 'OK',
            'source': 'filesystem',
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'type': 'courte',
            'size': len(content),
            'request_id': ctx.request_id,
            'metrics': ctx.metrics
        }), 200
        
    except Exception as e:
        ctx.log('error', f'EXCEPTION: {e}')
        return jsonify({
            'error': str(e),
            'status': 'ERROR',
            'request_id': ctx.request_id,
            'repo_dir': REPO_DIR
        }), 500

@app.route('/api/mm', methods=['GET'])
@require_token
def get_memoire_moyenne():
    """GET /api/mm?token=..."""
    ctx = RequestContext()
    ctx.log('info', 'GET /api/mm: d√©marrage')
    
    try:
        cached = get_cache('memoire_moyenne')
        if cached:
            ctx.log('info', 'Cache HIT')
            return jsonify({
                'status': 'OK',
                'source': 'cache',
                'content': cached,
                'timestamp': datetime.now().isoformat(),
                'type': 'moyenne',
                'size': len(cached),
                'request_id': ctx.request_id
            }), 200
        
        if not git_pull_with_retry(ctx):
            ctx.log('warning', 'Git pull √©chou√©')
        
        filepath = os.path.join(REPO_DIR, 'memoire_moyenne.md')
        content = read_file_with_retry(filepath, ctx)
        
        if not content:
            return jsonify({
                'error': 'Fichier non accessible',
                'status': 'ERROR',
                'request_id': ctx.request_id,
                'repo_dir': REPO_DIR
            }), 500
        
        set_cache('memoire_moyenne', content)
        ctx.log('info', f'SUCCESS ({ctx.elapsed():.3f}s)')
        
        return jsonify({
            'status': 'OK',
            'source': 'filesystem',
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'type': 'moyenne',
            'size': len(content),
            'request_id': ctx.request_id,
            'metrics': ctx.metrics
        }), 200
        
    except Exception as e:
        ctx.log('error', f'EXCEPTION: {e}')
        return jsonify({
            'error': str(e),
            'status': 'ERROR',
            'request_id': ctx.request_id,
            'repo_dir': REPO_DIR
        }), 500

@app.route('/api/ml', methods=['GET'])
@require_token
def get_memoire_longue():
    """GET /api/ml?token=..."""
    ctx = RequestContext()
    ctx.log('info', 'GET /api/ml: d√©marrage')
    
    try:
        cached = get_cache('memoire_longue')
        if cached:
            ctx.log('info', 'Cache HIT')
            return jsonify({
                'status': 'OK',
                'source': 'cache',
                'content': cached,
                'timestamp': datetime.now().isoformat(),
                'type': 'longue',
                'size': len(cached),
                'request_id': ctx.request_id
            }), 200
        
        if not git_pull_with_retry(ctx):
            ctx.log('warning', 'Git pull √©chou√©')
        
        filepath = os.path.join(REPO_DIR, 'memoire_longue.md')
        content = read_file_with_retry(filepath, ctx)
        
        if not content:
            return jsonify({
                'error': 'Fichier non accessible',
                'status': 'ERROR',
                'request_id': ctx.request_id,
                'repo_dir': REPO_DIR
            }), 500
        
        set_cache('memoire_longue', content)
        ctx.log('info', f'SUCCESS ({ctx.elapsed():.3f}s)')
        
        return jsonify({
            'status': 'OK',
            'source': 'filesystem',
            'content': content,
            'timestamp': datetime.now().isoformat(),
            'type': 'longue',
            'size': len(content),
            'request_id': ctx.request_id,
            'metrics': ctx.metrics
        }), 200
        
    except Exception as e:
        ctx.log('error', f'EXCEPTION: {e}')
        return jsonify({
            'error': str(e),
            'status': 'ERROR',
            'request_id': ctx.request_id,
            'repo_dir': REPO_DIR
        }), 500

# =====================================================
# üåê ENDPOINTS POST - LOGGING V3.5
# =====================================================

@app.route('/api/log-session', methods=['POST'])
@require_token
def log_session():
    """POST /api/log-session - Logger une session"""
    try:
        data = request.json
        
        valid, msg = validate_session_data(data)
        if not valid:
            return jsonify({'error': msg, 'status': 'INVALID_DATA'}), 400
        
        logger.info(f"Session logged: {data.get('summary', 'N/A')}")
        
        return jsonify({
            'status': 'success',
            'message': 'Session logg√©e',
            'timestamp': datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"Erreur logging session: {e}")
        return jsonify({'error': str(e), 'status': 'ERROR'}), 500

# =====================================================
# üåê ENDPOINTS UTILITAIRES V3.5
# =====================================================

@app.route('/api/health', methods=['GET'])
def health():
    """GET /api/health - Healthcheck"""
    return jsonify({
        'status': 'OK',
        'timestamp': datetime.now().isoformat(),
        'repo_dir': REPO_DIR,
        'repo_exists': os.path.exists(REPO_DIR)
    }), 200

@app.route('/api/stats', methods=['GET'])
@require_token
def stats():
    """GET /api/stats - Statistiques"""
    return jsonify({
        'status': 'OK',
        'repo_dir': REPO_DIR,
        'cache_size': len(MEMORY_CACHE),
        'model': CLAUDE_MODEL,
        'version': 'V3.5 FIXED'
    }), 200

@app.route('/')
def index():
    """GET / - Page d'accueil"""
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>_Head.Soeurise V3.5 FIXED</title>
        <style>
            body {{ font-family: Arial; background: #f5f5f5; padding: 40px; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; }}
            h1 {{ color: #667eea; }}
            .info {{ background: #f0f0f0; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            code {{ background: #eee; padding: 2px 6px; border-radius: 3px; }}
            .status {{ color: green; font-weight: bold; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üß† _Head.Soeurise V3.5 FIXED</h1>
            
            <div class="info">
                <strong>Status:</strong> <span class="status">‚úÖ Running</span><br>
                <strong>REPO_DIR:</strong> <code>{REPO_DIR}</code><br>
                <strong>Model:</strong> {CLAUDE_MODEL}<br>
                <strong>Version:</strong> V3.5 FIXED
            </div>
            
            <h2>üì° Endpoints disponibles</h2>
            <ul>
                <li>GET <code>/api/mc?token=...</code> - M√©moire courte</li>
                <li>GET <code>/api/mm?token=...</code> - M√©moire moyenne</li>
                <li>GET <code>/api/ml?token=...</code> - M√©moire longue</li>
                <li>POST <code>/api/log-session</code> - Logger une session</li>
                <li>GET <code>/api/health</code> - Healthcheck</li>
                <li>GET <code>/api/stats?token=...</code> - Statistiques</li>
            </ul>
            
            <h2>üîß Fix V3.5</h2>
            <ul>
                <li>‚úÖ REPO_DIR corrig√© pour /opt/render/project/src</li>
                <li>‚úÖ Fallback vers r√©pertoire courant</li>
                <li>‚úÖ Auto-d√©tection intelligente</li>
            </ul>
        </div>
    </body>
    </html>
    """
    return html, 200

# =====================================================
# üß™ SUITE DE TESTS V3.5
# =====================================================

def run_tests():
    """Suite de tests V3.5"""
    print("\n" + "="*70)
    print("üß™ SUITE DE TESTS V3.5 FIXED")
    print("="*70)
    
    tests_passed = 0
    tests_failed = 0
    
    print("\n[TEST 1] Configuration")
    try:
        assert REPO_DIR, "REPO_DIR vide"
        assert os.path.exists(REPO_DIR), f"REPO_DIR n'existe pas: {REPO_DIR}"
        print(f"‚úÖ Configuration OK (REPO_DIR={REPO_DIR})")
        tests_passed += 1
    except AssertionError as e:
        print(f"‚ùå {e}")
        tests_failed += 1
    
    print("\n[TEST 2] Fichiers m√©moire")
    try:
        for name in ['memoire_courte.md', 'memoire_moyenne.md', 'memoire_longue.md']:
            path = os.path.join(REPO_DIR, name)
            exists = os.path.exists(path)
            status = "‚úì" if exists else "‚úó"
            print(f"  {status} {name}")
        print("‚úÖ Fichiers v√©rifi√©s")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå {e}")
        tests_failed += 1
    
    print("\n[TEST 3] Validation donn√©es")
    try:
        valid, msg = validate_session_data({
            'summary': 'Test valide',
            'key_points': ['point1'],
            'decisions': [],
            'questions_ouvertes': [],
            'context': {'importance_level': 2}
        })
        assert valid, msg
        print("‚úÖ Validation OK")
        tests_passed += 1
    except AssertionError as e:
        print(f"‚ùå {e}")
        tests_failed += 1
    
    print("\n[TEST 4] Cache")
    try:
        test_content = "Test " + str(datetime.now())
        set_cache('test', test_content)
        cached = get_cache('test')
        assert cached == test_content
        print("‚úÖ Cache OK")
        tests_passed += 1
    except AssertionError as e:
        print(f"‚ùå {e}")
        tests_failed += 1
    
    print("\n" + "="*70)
    print(f"üìä R√âSULTAT : {tests_passed} ‚úÖ | {tests_failed} ‚ùå")
    print("="*70 + "\n")
    
    return tests_failed == 0

# =====================================================
# üéØ MAIN V3.5 FIXED
# =====================================================

def main():
    print("\n" + "="*70)
    print("üß† _Head.Soeurise V3.5 FIXED")
    print("="*70)
    print(f"Mod√®le: {CLAUDE_MODEL}")
    print(f"Phase: 2.1+ Production")
    print(f"REPO_DIR: {REPO_DIR}")
    print("="*70)
    
    if not run_tests():
        print("‚ö†Ô∏è  Tests √©chou√©s - v√©rifier configuration")
    
    print("\n[INIT] Flask API")
    print("  ‚úì GET /api/mc, /api/mm, /api/ml (m√©moires + cache)")
    print("  ‚úì POST /api/log-session (logger sessions)")
    print("  ‚úì GET /api/health (healthcheck)")
    print("  ‚úì GET /api/stats (statistiques)")
    print("  ‚úì GET / (page d'accueil)")
    
    port = int(os.environ.get("PORT", 10000))
    print(f"\n[START] Flask listening on 0.0.0.0:{port}")
    print("üöÄ Ready for production\n")
    
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == "__main__":
    main()
