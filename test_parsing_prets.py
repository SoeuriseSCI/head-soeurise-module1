#!/usr/bin/env python3
"""
Test du parsing des tableaux d'amortissement
Valide que les corrections (ignorer ECH/DBL, extraire lignes num√©rot√©es) fonctionnent
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from module2_workflow_v2 import ParseurTableauPret

# V√©rifier disponibilit√© de l'API Claude
CLAUDE_API_KEY = os.getenv('ANTHROPIC_API_KEY')
if not CLAUDE_API_KEY:
    print("‚ùå ERREUR: Variable ANTHROPIC_API_KEY non d√©finie")
    sys.exit(1)

# Fichiers PDFs √† tester
PDF_FILES = [
    "TABLEAUD'AMORTISSEMENTPRETIMMOBILIER_20230417.pdf",
    "TABLEAUD'AMORTISSEMENTPRETIMMOBILIER_20230417-1.pdf"
]

print("=" * 80)
print("TEST PARSING TABLEAUX AMORTISSEMENT (Post-fix ECH/DBL)")
print("=" * 80)
print()

parseur = ParseurTableauPret(api_key=CLAUDE_API_KEY)

for pdf_file in PDF_FILES:
    if not os.path.exists(pdf_file):
        print(f"‚ö†Ô∏è  Fichier non trouv√©: {pdf_file}")
        continue

    print(f"üìÑ Parsing: {pdf_file}")
    print("-" * 80)

    try:
        # Parser le PDF (24 premi√®res √©ch√©ances)
        pret_data, echeances_data = parseur.parse_tableau_pret(pdf_file)

        # V√©rifier structure pret_data
        print(f"‚úì Pr√™t:")
        print(f"  - Num√©ro: {pret_data.get('numero_pret', 'N/A')}")
        print(f"  - Banque: {pret_data.get('banque', 'N/A')}")
        print(f"  - Montant: {pret_data.get('montant_initial', 0):,.0f} ‚Ç¨")
        print(f"  - Taux: {pret_data.get('taux_annuel', 0):.3f}%")
        print(f"  - Dur√©e: {pret_data.get('duree_mois', 0)} mois")
        print(f"  - D√©but: {pret_data.get('date_debut', 'N/A')}")
        print(f"  - Fin: {pret_data.get('date_fin', 'N/A')}")
        print()

        # V√©rifier √©ch√©ances
        print(f"‚úì √âch√©ances pars√©es: {len(echeances_data)}")

        if len(echeances_data) == 0:
            print("  ‚ùå AUCUNE √©ch√©ance extraite !")
        else:
            # V√©rifier doublons de dates
            dates = [ech.get('date_echeance') for ech in echeances_data]
            dates_uniques = set(dates)

            if len(dates) != len(dates_uniques):
                print(f"  ‚ùå DOUBLONS D√âTECT√âS ! {len(dates)} √©ch√©ances, {len(dates_uniques)} dates uniques")
                # Afficher les doublons
                from collections import Counter
                compteur = Counter(dates)
                doublons = [date for date, count in compteur.items() if count > 1]
                print(f"     Dates en doublon: {doublons[:5]}")
            else:
                print(f"  ‚úì Aucun doublon (toutes les dates sont uniques)")

            # Afficher les 5 premi√®res √©ch√©ances
            print(f"\n  Premi√®res √©ch√©ances:")
            for i, ech in enumerate(echeances_data[:5]):
                num = ech.get('numero_echeance', '?')
                date = ech.get('date_echeance', '?')
                capital = ech.get('montant_capital', 0)
                interet = ech.get('montant_interet', 0)
                total = ech.get('montant_total', 0)
                print(f"    {num:>3}. {date} - Total: {total:>8.2f}‚Ç¨ (Cap: {capital:>8.2f}‚Ç¨, Int: {interet:>8.2f}‚Ç¨)")

            if len(echeances_data) > 5:
                print(f"    ... ({len(echeances_data) - 5} √©ch√©ances suppl√©mentaires)")

        print()

    except Exception as e:
        print(f"‚ùå ERREUR lors du parsing: {e}")
        import traceback
        traceback.print_exc()
        print()

print("=" * 80)
print("FIN DU TEST")
print("=" * 80)
